#!/bin/bash -eu

cmdArgs=$@

function isHelpCmd() {
    [[ $# -gt 0 ]] && isHelpWord $1 
}

function isHelpWord() {
    local word=$1
    [[ $word == "help" || $word == "-help" || $word == "--help" \
	|| $word == "Help" || $word == "HELP" ]]
}

if ! isHelpCmd $@ ; then
    exit 1
fi

cat <<EOF

goto is a tool for simplifying go's package management system.

goto compiles any compatible go project at any path or URL. It uses an
internally generated go workspace unique to each project. That allows
building go packages anywhere without using \$GOPATH. 

Use goto.cfg to define project trees. And as a single point of configuration
to define package tree imports and (optionally) aliases. 

Usage:

   goto 
   goto [PACKAGE_DIR]
   goto [PACKAGE_DIR]
   goto -C [PROJECT_DIR] [PACKAGE_NAME]
   goto -o OUT_PATH [PACKAGE_DIR]
   goto -t [PACKAGE_DIR]
   goto [OPTIONS] [CMD_TARGET]

Position Arguments:

   PACKAGE_DIR:    Path to a package directory. Must contain a goto.cfg or
                   have a parent directory that does so. goto.cfg marks the
                   root directory of the project tree. If blank defaults 
                   to ./

   PACKAGE_NAME:   Go package name, to be resolved inside the goto project
                   workspace.

   CMD_TARGET      Argument to resolve and pass to the underlying Go command.
                   Can always be a PACKAGE_DIR style argument, and will
                   automatically resolve to the relative package workspace path.
                   If not a path (e.g. "<sym> in "go doc <sym>") then passed 
                   unaltered into the go command.

Flags:

   -o OUT_PATH     Directory or file path to which all binaries built by the
                   goto project are exported. If black defaults to ./ 

   -C PROJECT_DIR  Path to the goto project directory. (Also accepts any
                   directory or file inside the project tree.) If not set
                   uses the project containing the PACKAGE_DIR argument.

   -c GO_CMD       Runs underlying mode in "go GO_CMD" instead of default 
                   "go install". GO_CMD can be any valid command to the go CLI.
                   E.g. build, test, doc, etc.

   -t              Runs in go-test mode (instead of default go-instal). Will 
                   test all child packages underneath the target package. 
                   (I.e. foo -> foo...)

   -T              Runs in go-test mode, but unlike -t does not automatically 
                   add the child package target. Equivalent to "-c test"

   -b              Single flat that changes the underlying run mode to go-build.
                   Equivalnet to "-c build"

   -f "GO_FLAGS"   Flag sets the build flags to be passed to the underlying go
                   command. Make sure to quote if using multiple flags. E.g.
                   to build with shared libraries and race detection:
                   -f "-race -buildmode c-shared"


For more information check the README.md and docs in the project repository:
  github.com/Mister-Meeseeks/goto/

EOF
